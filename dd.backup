\documentclass[a4paper,10pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{lipsum}
\usepackage[section]{placeins}
\usepackage{listings,xcolor}
\usepackage{enumerate}
\usepackage{vhistory}
\usepackage{graphicx}
\usepackage{float}
\usepackage{rotating}
\usepackage{afterpage}
\usepackage{color}
\usepackage[showframe=false]{geometry}
\usepackage{changepage}
\setcounter{tocdepth}{3}
\setcounter{secnumdepth}{3}
\title{Design Document}
\author{Joan Ficapal Vila (876805), Nicolò Vendramin (879113)}
\date{\today\\v1.1}
\begin{document}
  \pagenumbering{Roman}
  \begin{figure}[t]
  \centering
    \includegraphics[scale=0.3]{Resources/logoPolimi.png}
  \end{figure}
  \thispagestyle{empty}
  \maketitle
  \newpage
  \begin{versionhistory}
    \vhEntry{0.1}{01.01.17}{N and J}{Initiated the document}
    
  \end{versionhistory}
  \paragraph{Hours of work}
  \begin{description}
    \item[$\bullet$] Joan Ficapal Vila : 19 hours
    \item[$\bullet$] Nicolò Vendramin : 17 hours
   \end{description}
   \newpage
  \tableofcontents
  \newpage
  \pagenumbering{arabic}

\maketitle
\section{Introduction}
\subsection{Purpose and Scope}
\paragraph{} This document is the Integration Testing Plan Document for the PowerEnjoy application. \\ It is produced in order to specify in detail how
the testing process must be performed in order to guarantee a correct and deep analysis of the application's behaviour.\\ Integration testing must be considered a key 
activity in order to ensure the correct functioning of all the subsystems composing the software to be developed. As a matter of fact the unit testing itself is not 
sufficient to make sure that the overall system in its complex works as established. \\
To outline in a clear way the main aspects concerning this part of the testing activity we are going to include in this document a concise but detailed description
of what are the components that must be tested, how they should be integrated, the strategy to be followed in the integration process, the precedences to be followed 
in the integration and a description of the testing activities for each integration step including the input data and the expected output.
\subsection{Definitions, Acronyms and Abbreviations}
  \subsubsection{Acronyms}
  \begin{description}
    \item[$\bullet$] \textbf{API:} Access point of Interface. This term is used to indicate the interfaces exposed to access a software
    service from another software service.
    \item[$\bullet$] \textbf{DD:} Design Document. This document.
    \item[$\bullet$] \textbf{RASD:} Requirements Analysis and Specifications Document. The refernce document for the specifications of the system to be developed.
  \end{description}
  \subsubsection{Definitions}
   \begin{description}
   \item[$\bullet$] \textbf{Unit Testing:} With unit testing is meant that activity that make sure that every basic unit that composes the software is correctly 
   working as expected. With unit we indicate the smaller unit of which the software is component. In case of a Java program we can assume Classes as units.
   \item[$\bullet$] \textbf{Integration Testing:} With integration testing is meant that phase 
   of software testing in which individual modules are tested together as a group.
   \end{description}
\subsection{Reference Documents}
Here we attached the list of all the documents that are kept as references in the writing of this document.
\begin{description}
    \item[$\bullet$] PowerEnjoy RASD Document.
    \item[$\bullet$] PowerEnjoy Design Document.
    \item[$\bullet$] Course Slides.
    \item[$\bullet$] Templates provided at lesson.
  \end{description}
 \newpage
 
\section{Integration Strategy}
\subsection{Entry Criteria}
In order to ensure that the testing process is finalized with good results some conditions must to be met. At first is required that all both the RASD and the DD are 
completed and defined. This condition must be guaranteed to have a complete and detailed description of the system requirements and 
design on which to base the testing activities.
Before to starting the very integration process it's required to unit test the single components of the system with unit testing. It's important that before integrating 
two components each of them have passed all the unit tests that were designed for them. We assume that for the components included in the request manager and controller
the percentage of coverage reached before starting their integration is between 95\% and 100\%.
For what the Client Application is concerned, since it's a graphical interface, the unit testing needed before the integration should be at least 70\%; making sure that 
the only non tested components are the parts related to the very presentation and not the ones related to the data exchange process.
An additional condition that must be met before starting the integration testing activity is that the functioning of all the API has been checked to be as expected from
the documentation. In order to meet this hypothesis a detailed checking activity must be done in order 
to verify the behaviour of the APIs provided by the external services used. 
by the software.
\subsection{Elements to be integrated} Since a precise description of all the components is given in the DD we invite the reader to refer to that document in case of need.
The integration testing is made in order to validate verify together the following group of components. 
As stated before we assume that all the components belonging to the following list, before being integrated
satisfy the unit level coverage specified in the previous paragraph. The unit to integrate are:
\begin{description}
    \item[$\bullet$] Mobile Client
    \item[$\bullet$] Request Manager
    \item[$\bullet$] Registration and Login Manager
    \item[$\bullet$] Pricing and Discount Manager
    \item[$\bullet$] Service Manager
    \item[$\bullet$] Resource Manager
  \end{description}
\end{document}
\subsection{Integration Testing Strategy} To define the strategy to be used for the integration testing
we took into account different factors among which the more importants are the architectural structure of the software
described in the DD and the willing to optimize the work during the testing process. The best solution
to fit those needs is to adopt a Bottom-Up and Core-module-first approach. In practical terms that means that
we are going to integrate before the low level components between them and only after we
will test the communication between the high level components. The core-module-first approach means
that we will give a major priority to the integration of those components that form the controller system in order
to be sure that all the core functionalities of the application are provided in the correct way and that the controller
works as an integrated system.